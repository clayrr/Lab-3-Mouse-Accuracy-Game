{"version":3,"sources":["../game.ts"],"names":["Difficulty","Shape"],"mappings":"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","file":"game.mjs","sourcesContent":["/**\n * represents an individual target in the game\n*/\ninterface Target {\n\telement: HTMLElement;\n\ttimeout: number;\n}\n\n/**\n * represents possible difficulties\n */\nenum Difficulty {\n\tEasy = 2000, // 2 seconds between spawn times\n\tMedium = 1000, // 1 second between spawn times\n\tHard = 500 // 0.5 seconds between spawn times\n}\n\n/**\n * Represents possible shapes of the targets\n */\nenum Shape {\n\tCircle = 'circle',\n\tSquare = 'square',\n\tTriangle = 'triangle',\n}\n\ntype HTMLGenericValue = HTMLElement & { value: string };\n\nlet gameTime: number = 30; // default time\nlet difficulty: Difficulty = Difficulty.Easy; // default difficulty\nlet targetShape: Shape = Shape.Circle; // default target shape\nlet targetColor: string = '#ff0000'; // default target color\nlet totalTargets: number = 0;\nlet targetsClicked: number = 0;\nlet missedTargets: number = 1;\nlet gameTimer: number | null = null;\nlet targetInterval: number | null = null;\n\nconst getElement = <T extends HTMLElement>(id: string): T => document.getElementById(id) as T;\nconst getValue = (id: string): string => getElement<HTMLGenericValue>(id).value\n\nconst startButton: HTMLButtonElement = getElement('startGame');\nconst gameArea: HTMLDivElement = getElement('gameArea');\nconst scoreboard: HTMLDivElement = getElement('scoreboard');\nconst totalTargetsDisplay: HTMLParagraphElement = getElement('totalTargets');\nconst targetsClickedDisplay: HTMLParagraphElement = getElement('targetsClicked');\nconst finalScoreDisplay: HTMLParagraphElement = getElement('finalScore');\nconst missedTargetsDisplay: HTMLParagraphElement = getElement('missedTargets');\nconst difficultySelect: HTMLSelectElement = getElement('targetDifficulty');\nconst shapeSelect: HTMLSelectElement = getElement('targetShape');\n\n\n// dynamically populate the difficulty and shape dropdowns\nfunction populateSelectOptions() {\n\t// populate difficulty options\n\tObject.values(Difficulty)\n\t\t.filter(v => typeof v === 'string')\n\t\t.forEach(v => {\n\t\t\tconst option = document.createElement('option');\n\t\t\toption.value = v.toString();\n\t\t\toption.textContent = v.charAt(0).toUpperCase() + v.slice(1);\n\t\t\tdifficultySelect.appendChild(option);\n\t\t});\n\n\t// populate shape options\n\tObject.values(Shape)\n\t\t.filter(v => typeof v === 'string')\n\t\t.forEach(v => {\n\t\t\tconst option = document.createElement('option');\n\t\t\toption.value = v.toString();\n\t\t\toption.textContent = v.charAt(0).toUpperCase() + v.slice(1);\n\t\t\tshapeSelect.appendChild(option);\n\t\t});\n}\n\n// initialize the game\nfunction startGame() {\n\tresetGame();\n\n\t// retrieve the game settings from the input fields\n\tgameTime = parseInt(getValue('targetDuration'));\n\tdifficulty = Difficulty[getValue('targetDifficulty') as any] as any;\n\ttargetShape = getValue('targetShape') as Shape;\n\ttargetColor = getValue('targetColor');\n\n\t// set interval to spawn targets and set game timer\n\ttargetInterval = window.setInterval(spawnTarget, difficulty);\n\tgameTimer = window.setTimeout(endGame, gameTime * 1000);\n}\n\n// end the game and show the score\nfunction endGame() {\n\tif (targetInterval) clearInterval(targetInterval); // clean up target spawning interval\n\tclearTargets(); // clean up remaining targets that haven't naturally despawned\n\tgetElement<HTMLAudioElement>('endGameAudio').play(); // play end game audio\n\tdisplayScore(); // display the calculated scoreboard\n}\n\n// reset the game state\nfunction resetGame() {\n\ttotalTargets = 0; // reset the targets spawned counter\n\ttargetsClicked = 0; // reset the targets clicked counter\n\tmissedTargets = 0; // reset the targets missed counter\n\tclearTargets(); // clear the game area child targets\n\tscoreboard.classList.add('hidden'); // hide the scoreboard\n}\n\n// clear all targets from the game area\nfunction clearTargets() {\n\tgameArea.innerHTML = ''; // reset the game area children\n}\n\n// display the scoreboard with the final results\nfunction displayScore() {\n\ttotalTargetsDisplay.textContent = `total targets: ${totalTargets}`; // set the total targets display\n\ttargetsClickedDisplay.textContent = `targets clicked: ${targetsClicked}`; // set the clicked targets display\n\tmissedTargetsDisplay.textContent = `missed targets: ${missedTargets}`; // set the missed targets display\n\tfinalScoreDisplay.textContent = `final score: ${calculateScore()}`; // set the final score display\n\tscoreboard.classList.remove('hidden'); // unhide the scoreboard\n}\n\n// calculate the player's score\nconst calculateScore = () => targetsClicked === 0 ? 'seriously. you didnt click anything??' : Math.floor((targetsClicked / totalTargets) * 100) * Math.random() * 35 * 420 * 34948343843;\n\n// spawn a target in a random location in the game area\nfunction spawnTarget() {\n\ttotalTargets++;\n\n\t// create a new target element\n\tconst target = document.createElement('div');\n\ttarget.classList.add('absolute', 'target', 'transition-transform');\n\ttarget.style.backgroundColor = targetColor;\n\n\t// set target shape\n\tswitch (targetShape) {\n\t\tcase Shape.Circle:\n\t\t\ttarget.style.width = '20px';\n\t\t\ttarget.style.height = '20px';\n\t\t\ttarget.classList.add('rounded-full');\n\t\t\tbreak;\n\t\tcase Shape.Square:\n\t\t\ttarget.style.width = '20px';\n\t\t\ttarget.style.height = '20px';\n\t\t\tbreak;\n\t\tcase Shape.Triangle:\n\t\t\ttarget.style.width = '0';\n\t\t\ttarget.style.height = '0';\n\t\t\ttarget.style.borderLeft = '10px solid transparent';\n\t\t\ttarget.style.borderRight = '10px solid transparent';\n\t\t\ttarget.style.borderBottom = `20px solid ${targetColor}`;\n\t\t\ttarget.style.backgroundColor = 'transparent'\n\t\t\tbreak;\n\t}\n\n\t// get a random position within the game area\n\tconst gameAreaRect = gameArea.getBoundingClientRect();\n\tconst x = Math.random() * (gameAreaRect.width - 50);\n\tconst y = Math.random() * (gameAreaRect.height - 50);\n\ttarget.style.transform = `translate(${x}px, ${y}px) scale(1)`;\n\n\tconst onclickTarget = () => {\n\t\ttargetsClicked++;\n\t\ttarget.remove(); // Remove target when clicked\n\t}\n\n\t// add click event listener for when the user clicks the target\n\ttarget.addEventListener('click', onclickTarget);\n\n\t// animate the target to expand and shrink within 3 seconds (1500ms expand, 1500ms shrink)\n\tconst animation = target.animate([\n\t\t{ transform: `translate(${x}px, ${y}px) scale(1)` }, // initial phase\n\t\t{ transform: `translate(${x}px, ${y}px) scale(4)` }, // expanding phase\n\t\t{ transform: `translate(${x}px, ${y}px) scale(1)` } // shrinking phase\n\t], {\n\t\tduration: 3000, // total duration (3000ms: 1500ms for expanding, 1500ms for shrinking)\n\t\teasing: 'ease-in-out', // smooth transition for both expanding and shrinking\n\t\tfill: 'forwards', // keeps the target in its final state after the animation\n\t});\n\n\t// handle when the animation finishes (i.e. target missed)\n\tconst onfinishTarget = () => {\n\t\tif (document.body.contains(target)) {\n\t\t\tmissedTargets++;\n\t\t\ttarget.remove(); // remove the missed target\n\t\t}\n\t};\n\n\t// remove the target if not clicked by the end of its lifecycle (3 seconds)\n\tanimation.addEventListener('finish', onfinishTarget);\n\n\t// append the target to the game area\n\tgameArea.appendChild(target);\n}\n\n// INITIALIZE GAME\n\npopulateSelectOptions(); // populates the selection options based on the enums.\nstartButton.addEventListener('click', startGame); // start the game when the start button is clicked\n"]}